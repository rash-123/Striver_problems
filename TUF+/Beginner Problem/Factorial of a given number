// https://takeuforward.org/plus/data-structures-and-algorithm/beginner-problems/basic-maths/factorial-of-a-given-number

class Solution {
public:

//Time Complexity: O(N) – Iterating once from 1 to N.
//Space Complexity: O(1) – Using a couple of variables i.e., constant space.
    int factorial(int n) {
        if(n == 0 || n == 1){
            return 1;
        }
        int fact = 1;
        for(int i = 1; i <= n; i++){
            fact = fact * i;
        }
        return fact;
    }
};

// Time Complexity O(N) — The function makes N recursive calls to reach the base case, so the time complexity is proportional to the number of recursive calls

// Space Complexity O(N) — The call stack grows with each recursive call, using N stack frames, so the space complexity is proportional to the depth of recursion.

class Solution {
public:
    int factorial(int n) {
        if(n == 0 || n == 1){
            return n;
        }
        return n*factorial(n-1);
    }
};

